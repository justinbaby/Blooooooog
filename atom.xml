<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yuuta</title>
  
  <subtitle>Android 开发爱好者 ヽ(✿ﾟ▽ﾟ)ノ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.trumeet.top/"/>
  <updated>2017-09-20T10:44:22.001Z</updated>
  <id>https://blog.trumeet.top/</id>
  
  <author>
    <name>Trumeet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebServlet+Jetty+Nginx轻松开发并部署应用服务器</title>
    <link href="https://blog.trumeet.top/2017/09/20/webservlet-jetty-appserver/"/>
    <id>https://blog.trumeet.top/2017/09/20/webservlet-jetty-appserver/</id>
    <published>2017-09-20T10:44:22.001Z</published>
    <updated>2017-09-20T10:44:22.001Z</updated>
    
    <content type="html"><![CDATA[<p>本文教你如何使用 WebServlet + Jetty + Nginx 从开发到部署应用服务器！</p><h1 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h1><p>我最近需要为 Dir 开发后端应用服务器，以前是用的某SaaS服务平台（也是WebServlet），觉得太贵，于是需要部署到自己的服务器。目前有比较成熟的 Python 、PHP 和 JavaScript等语言 可用，但是我需要尽快开发出来，不能花时间新学一门语言，于是就选择了一直在用的 WebServlet。</p><h1 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h1><p>我默认你已会Java，对WebServlet有了解。关于WebServlet，可以参考：<a href="http://www.runoob.com/servlet" target="_blank" rel="external">http://www.runoob.com/servlet</a> 和 <a href="http://www.importnew.com/14621.html" target="_blank" rel="external">http://www.importnew.com/14621.html</a> 。</p><p>本文使用 Intellij Idea 社区版 作为开发和调试环境。</p><h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><p>IntelliJ Idea 不资瓷Web开发，所以我们需要手动写一些配置。参考：<a href="http://qinghua.github.io/intellij-idea-community-hotswap-webapp/" target="_blank" rel="external">http://qinghua.github.io/intellij-idea-community-hotswap-webapp/</a> 。</p><ul><li><p>首先，新建一个项目。</p><ul><li><p>打开Idea，点击 <code>Create new project</code> 新建项目。左侧选择 <code>Maven</code>，Project SDK选 <code>1.8</code>。</p><p><img src="https://ooo.0o0.ooo/2017/06/11/593d2920f3f94.png" alt="选择Maven"></p></li></ul></li></ul><ul><li><p>然后Next，输入你的 <code>GroupId</code>、<code>ArtifactId</code> 以及 <code>Version</code>。<img src="https://ooo.0o0.ooo/2017/06/11/593d29ce6a7b2.png" alt="输入信息"></p><p>Next，输入路径，最后Finish。</p></li></ul><h2 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h2><ul><li><p>首先进入项目，打开 <code>pom.xml</code>。</p><p><img src="https://ooo.0o0.ooo/2017/06/11/593d2a2754821.png" alt="我这里pom.xml"></p></li><li><p>在 <code>project</code> 内新建 <code>build</code>，填写下列XML代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jetty-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">contextPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">contextPath</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">scanIntervalSeconds</span>&gt;</span>0<span class="tag">&lt;/<span class="name">scanIntervalSeconds</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">connectors</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">connector</span> <span class="attr">implementation</span>=<span class="string">"org.mortbay.jetty.nio.SelectChannelConnector"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">maxIdleTime</span>&gt;</span>60000<span class="tag">&lt;/<span class="name">maxIdleTime</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">connector</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">connectors</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>然后在菜单 <code>Run</code> -&gt; <code>Edit Configurations</code> 里，新建一个<code>Maven</code> 根节点（直接点绿色加号就行），然后填入如图参数：</p><p><img src="https://ooo.0o0.ooo/2017/06/11/593d2c154f103.png" alt="填写参数"></p><ul><li>Name：Jetty</li><li>Working directory：默认就好</li><li>Command line：jetty:run</li></ul></li><li><p>然后选择 <code>Runner</code> 标签，把 <code>Use Project Settings</code> 去掉，填入参数：</p><p><img src="https://ooo.0o0.ooo/2017/06/11/593d2fb557d1e.png" alt="Runner标签填入参数"></p><ul><li><p>VM Options：-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=6006</p><p>端口6006可以自行决定，别和其它端口冲突就行。</p></li></ul></li><li><p>再点击绿色+号，新建一个根节点： <code>Remote</code>，填入参数：</p><p><img src="https://ooo.0o0.ooo/2017/06/11/593d30650c638.png" alt="Remote"></p><ul><li>Name：Jetty-Remote-Debug</li><li>Port：6006 （和先前在<code>Runner</code>标签里填写的端口一致就行。）</li></ul><p>随后点击 OK 退出。</p></li><li><p>再次回到 <code>pom.xml</code>，添加 <code>Jetty</code> 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.3.v20170317<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><p>然后按 <code>Ctrl+S</code> 保存，在右下角弹出通知中点击 <code>Import Changs</code>，等一会儿加载完成。</p></li></ul><h2 id="开始开发-1"><a href="#开始开发-1" class="headerlink" title="开始开发"></a>开始开发</h2><ul><li>在左侧 Project 窗格打开 <code>src -&gt; main -&gt; java</code> 照常新建包和Servlett，可以参照上面给出的两个教程，不多阐述：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest request,</span></span></div><div class="line"><span class="function"><span class="params">                       HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException,</span></div><div class="line"><span class="function">            IOException </span>&#123;</div><div class="line">        <span class="comment">// 设置响应内容类型</span></div><div class="line">        response.setContentType(<span class="string">"text/html"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 实际的逻辑是在这里</span></div><div class="line">        PrintWriter out = response.getWriter();</div><div class="line">        out.println(<span class="string">"Hello World"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>配置Servlet</p></li><li><ul><li><p>左侧 Project 窗格选择 Main，点击右键新建目录，名叫 <code>webapp</code>，里面新建 <code>WEB-INF</code> 目录，创建 <code>web.xml</code> 配置文件：（会提示URL is not registered，不用管它）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"3.0"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></div><div class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>在里面加入你的 Servlet:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorldServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>top.trumeet.demo.HelloWorldServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorldServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/welcome<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure></li></ul></li></ul><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul><li>运行很简单，执行 <code>Jetty</code> 运行即可：</li></ul><p><img src="https://ooo.0o0.ooo/2017/06/11/593d345579da6.png" alt="运行程序"></p><ul><li><p>等待日志出现 <code>[INFO] Started Jetty Server</code> 即成功了。</p><p><img src="https://ooo.0o0.ooo/2017/06/11/593d3455e4226.png" alt="日志"></p></li><li><p>这时，访问 <a href="http://127.0.0.1:8080/welcome" target="_blank" rel="external">http://127.0.0.1:8080/welcome</a> （8080是你pom.xml中plugin里设定的端口）即可看到 <code>Hello World</code> 辣！</p><p><img src="https://ooo.0o0.ooo/2017/06/11/593d34fce93e1.png" alt="HelloWorld"></p></li></ul><h1 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h1><h2 id="在服务器上安装Jetty"><a href="#在服务器上安装Jetty" class="headerlink" title="在服务器上安装Jetty"></a>在服务器上安装Jetty</h2><ul><li><p>安装JDK1.8</p><blockquote><p>参考：<a href="http://www.yiibai.com/article/4439.html" target="_blank" rel="external">http://www.yiibai.com/article/4439.html</a></p></blockquote><p>（比较简单，就不Copy了 XD）</p></li><li><p>安装Jetty</p><ul><li><p>从官网下载，打开官网 <a href="http://www.eclipse.org/jetty/" target="_blank" rel="external">http://www.eclipse.org/jetty/</a>，找到最新下载直链，进行下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://central.maven.org/maven2/org/eclipse/jetty/jetty-distribution/9.4.6.v20170531/jetty-distribution-9.4.6.v20170531.tar.gz</div></pre></td></tr></table></figure></li><li><p>解压：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xzvf jetty-distribution-9.4.6.v20170531.tar.gz</div></pre></td></tr></table></figure></li></ul></li></ul><h2 id="编译war"><a href="#编译war" class="headerlink" title="编译war"></a>编译war</h2><p>到AS右面 <code>Maven Projects</code> 窗格 选择 <code>Lifecycle -&gt; package</code> 编译。</p><p><img src="https://ooo.0o0.ooo/2017/06/12/593dd818ef5aa.png" alt=""></p><p>双击启动，等待日志出现 <code>Process finished with exit code 0</code> 即表示编译完成（一般几秒钟就好吧..）</p><p>在上面 <code>[INFO] Building war: XXX.war</code> 处找到war位置。</p><h2 id="部署war"><a href="#部署war" class="headerlink" title="部署war"></a>部署war</h2><ul><li><p>启动服务器</p><p>我们使用 jetty.sh start 启动服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jetty-distribution-9.4.6.v20170531/bin/jetty.sh start</div></pre></td></tr></table></figure><p>等待 <code>OK</code> 之后即可访问 <code>服务器IP:8080</code> 就会出现无已部署应用的404页面，即表示安装Jetty成功。</p></li><li><p>上传到服务器</p><p>有两种方式部署war，第一种是直接把war放到 <code>jetty/webapps</code> 下，然后通过 <code>&lt;Jetty监听地址&gt;/XXX.war</code> 访问。另一种是放到任何可以访问的地方，然后在 <code>jetty/webapps</code> 新建一个XML用于访问。</p><ul><li><p>第一种方案</p><p>很简单，把war用SFTP等方式上传到 <code>webapps</code> 下即可。如 <code>jetty/webapps/Demo.war</code> ，就需要访问 <code>&lt;你的IP&gt;:8080/Demo</code> 。</p></li><li><p>第二种方案</p><p>首先，把war放到你需要的目录，如 <code>~</code> ，名称随意。然后在 <code>jetty/webapps</code> 新建 <code>Demo.xml</code>，填入以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"  encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd"&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">Configure</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.webapp.WebAppContext"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Set</span> <span class="attr">name</span>=<span class="string">"contextPath"</span>&gt;</span>/demo<span class="tag">&lt;/<span class="name">Set</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Set</span> <span class="attr">name</span>=<span class="string">"war"</span>&gt;</span>/root/XXX.war<span class="tag">&lt;/<span class="name">Set</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Configure</span>&gt;</span></div></pre></td></tr></table></figure><p>里面 <code>contextPath</code> 就是 <code>&lt;你的IP&gt;:8080/</code> 后面的地址。<code>war</code> 是war的 <strong>绝对路径</strong>。</p></li></ul></li><li><p>重启Jetty</p><p>每次更新war都需要重启jetty，使用 <code>jetty.sh restart</code> 即可。</p></li></ul><ul><li><p>验证效果</p><p>至此，我们已经部署好了你的应用，现在打开 <code>&lt;你的服务器IP&gt;:8080/demo/welcome</code> 即可访问到刚才的 HelloWorld 了。（说一下，8080是端口号，我这里一直保持的Jetty默认，需要修改端口自行Google）</p></li></ul><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>我们希望通过诸如 <code>api.example.com</code> 访问到我们的应用，所以需要配置Nginx。</p><p>我这里用的lnmp一键安装包，所以这样做：</p><ul><li><p>新建一个vHost</p><p><code>lnmp vhost add</code></p><p>域名自己填，如 <code>api.example.com</code>，剩下的.. 自己填（X</p></li><li><p>修改Nginx配置文件</p><p>打开 <code>/usr/local/nginx/conf/vhost/&lt;刚才填的第一个域名&gt;.conf</code> （不是lnmp可能不在这里，大家自己找一下）</p><p>在 <code>server</code> 块内追加如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">location</span> / &#123;</div><div class="line">         <span class="attribute">proxy_pass</span>      http://127.0.0.1:8080;</div><div class="line">         <span class="attribute">proxy_redirect</span>  <span class="literal">off</span>;</div><div class="line">         <span class="attribute">proxy_set_header</span>        Host            <span class="variable">$host</span>;</div><div class="line">         <span class="attribute">proxy_set_header</span>        X-Real-IP       <span class="variable">$remote_addr</span>;</div><div class="line">         <span class="attribute">proxy_set_header</span>        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p><strong>这里的 8080 就是刚才Jetty设定的端口，如果你修改了，这里也需要同时修改。</strong></p><p>然后保存退出。最后 <code>lnmp nginx restart</code> 重启nginx。</p></li><li><p>添加域名解析</p><p>这个自己去域名服务商或者CloudFlare之类的服务商填就行。</p></li></ul><p>最终，我们可以通过 <code>api.example.com/demo/welcome</code> 看到 <code>Hello World</code> 了。</p><p>​</p><h1 id="更新Webapp"><a href="#更新Webapp" class="headerlink" title="更新Webapp"></a>更新Webapp</h1><p>（这方面没有仔细研究，轻拍）</p><p>如果我们的程序做了修改，我的做法是重新打包，上传，最后重启Jetty即可。</p><hr><p>还要说一下，我没有设定Jetty开机自启，所以每次重启服务器都需要 <code>jetty.sh start</code> 启动一下。</p><blockquote><p>本博客均为原创内容，未经允许不得转载！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文教你如何使用 WebServlet + Jetty + Nginx 从开发到部署应用服务器！&lt;/p&gt;
&lt;h1 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h1&gt;&lt;p&gt;我最近需要为 Dir 开发后
      
    
    </summary>
    
      <category term="后端" scheme="https://blog.trumeet.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="https://blog.trumeet.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Jetty" scheme="https://blog.trumeet.top/tags/Jetty/"/>
    
      <category term="Nginx" scheme="https://blog.trumeet.top/tags/Nginx/"/>
    
      <category term="WebServlet" scheme="https://blog.trumeet.top/tags/WebServlet/"/>
    
      <category term="Idea" scheme="https://blog.trumeet.top/tags/Idea/"/>
    
  </entry>
  
  <entry>
    <title>Bugly热更新填坑记录</title>
    <link href="https://blog.trumeet.top/2017/09/20/bugly-tinker-issues/"/>
    <id>https://blog.trumeet.top/2017/09/20/bugly-tinker-issues/</id>
    <published>2017-09-20T10:44:21.977Z</published>
    <updated>2017-09-20T10:44:21.977Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间用Bugly的热更新功能，按照官方文档做了之后，踩了不少坑，记录一下，也方便大家不要跳进去。</p><h1 id="未匹配到可应用补丁包的App版本，请确认补丁包的基线版本是否已发布"><a href="#未匹配到可应用补丁包的App版本，请确认补丁包的基线版本是否已发布" class="headerlink" title="未匹配到可应用补丁包的App版本，请确认补丁包的基线版本是否已发布"></a>未匹配到可应用补丁包的App版本，请确认补丁包的基线版本是否已发布</h1><p>这个确认自己配置对了之后，<strong>仔细读文档</strong>，需要上传 <strong>build/outputs/patch</strong> 里的补丁包，而不是 <strong>build/outputs/tinkerpatch</strong> 里面的！！</p><h1 id="TinkerID和发布多个补丁"><a href="#TinkerID和发布多个补丁" class="headerlink" title="TinkerID和发布多个补丁"></a>TinkerID和发布多个补丁</h1><p>这里解释以下Bugly的TinkerID是如何设置的，我们只需要了解如何发布一个全量版本，然后发布补丁，然后再次发布补丁，然后再发布全量版本…</p><p>Tinker ID 必须全局唯一，不管是两个版本之间，两个补丁之间还是补丁和版本之间。</p><h2 id="全量版本"><a href="#全量版本" class="headerlink" title="全量版本"></a>全量版本</h2><p>如我们的App要发布 <code>2.0</code> 版，versionCode是<code>2</code>。</p><ul><li>Tinker ID 需要设置为 <code>2-base</code>。 2 是 versionCode，这是为了和以前的全量版进行区分。后面的 base 是指这是一个全量版。</li><li>然后编译。找到 <code>bakApk</code> 目录名，填写到gradle配置中。</li><li>正常发布版本。</li></ul><h2 id="发布第一个补丁"><a href="#发布第一个补丁" class="headerlink" title="发布第一个补丁"></a>发布第一个补丁</h2><p>我们在发布 <code>2.0</code> 之后，需要发布一个补丁来修复Bug。</p><ul><li>正常修改代码</li><li>Tinker ID 改为 <code>2-patch-0</code> ，2 还是 versionCode，<code>patch</code> 为了和全量版区分，<code>0</code> 指的是第0个补丁。（这个Tinker ID只要全局唯一即可，你也可以用git commit号之类的，都行）</li><li>执行 <code>tinker-support</code>里面的编译任务，<strong><code>tinker</code>里面的执行完后不会在 <code>build/outputs/patch</code> 生成补丁！！</strong></li><li>打开后台，正常发布补丁。</li></ul><h2 id="发布第二个补丁"><a href="#发布第二个补丁" class="headerlink" title="发布第二个补丁"></a>发布第二个补丁</h2><p>后来又有一个Bug需要用补丁修复，我们还需要发布一个补丁。</p><ul><li>正常修改代码</li><li>Tinker ID 改为 <code>2-patch-1</code>。 <strong>不发布新的全量版，<code>bakApk目录</code>始终保持不变。</strong></li><li>同上进行发布即可。</li></ul><hr><p>更多的坑，还在慢慢爬..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这段时间用Bugly的热更新功能，按照官方文档做了之后，踩了不少坑，记录一下，也方便大家不要跳进去。&lt;/p&gt;
&lt;h1 id=&quot;未匹配到可应用补丁包的App版本，请确认补丁包的基线版本是否已发布&quot;&gt;&lt;a href=&quot;#未匹配到可应用补丁包的App版本，请确认补丁包的基线版本是
      
    
    </summary>
    
      <category term="Android开发" scheme="https://blog.trumeet.top/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="https://blog.trumeet.top/tags/Android%E5%BC%80%E5%8F%91/"/>
    
      <category term="Bugly" scheme="https://blog.trumeet.top/tags/Bugly/"/>
    
      <category term="热更新" scheme="https://blog.trumeet.top/tags/%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    
      <category term="Tinker" scheme="https://blog.trumeet.top/tags/Tinker/"/>
    
      <category term="Issues" scheme="https://blog.trumeet.top/tags/Issues/"/>
    
  </entry>
  
  <entry>
    <title>访问隐藏 API 的另一条路</title>
    <link href="https://blog.trumeet.top/2017/09/12/new-way-access-hidden-api/"/>
    <id>https://blog.trumeet.top/2017/09/12/new-way-access-hidden-api/</id>
    <published>2017-09-12T16:50:00.000Z</published>
    <updated>2017-09-20T10:44:22.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在，博主使用 hidden-api 有这几种途径：</p><ul><li>反射</li><li>编译好的 framework jar （如 GitHub android-hidden-api 项目）<br>这里面介绍一下最近学到的另一种方式。</li></ul><h1 id="Android-SDK"><a href="#Android-SDK" class="headerlink" title="Android SDK"></a>Android SDK</h1><p>先观察一下（反编译）Android SDK（android.jar），我们可以看到 <strong>所有的 构造器、方法</strong> 的实现均被替换成了<code>throw new RuntimeException (&quot;Stub!&quot;);</code> 的 “有名无实” 实现，而且在运行的时候87并没有出现 “Stub” Crash。这是怎么回事呢——</p><p>与设备上同名的方法和构造器（如 <code>android.os.Environment#getExternalStorage</code> 不知道拼写对不对 逃跑），会在真机运行时被 <strong>替换为本机实现</strong>，所以也就 “正常地调用了”。</p><p>有一次我下载个一加Launcher，打开之后 Crash 了，Message就是 Stub，也就说明它调用了一加ROM的一些 API。这些接口在我的原生上面不存在，所以就不会替换为本地实现，从而触发 Stub。</p><h2 id="那么-SDK-是做什么用的"><a href="#那么-SDK-是做什么用的" class="headerlink" title="那么 SDK 是做什么用的"></a>那么 SDK 是做什么用的</h2><p>SDK 只是用于 <strong>通过编译</strong>，而且 framework jar 是使用 <strong>provided</strong> 方式引用的，不会被打包进 apk</p><h2 id="为什么非要-Stub"><a href="#为什么非要-Stub" class="headerlink" title="为什么非要 Stub"></a>为什么非要 Stub</h2><p>这个是 <a href="http://androidxref.com/7.1.1_r6/xref/external/doclava/src/com/google/doclava/" target="_blank" rel="external">Doclava</a> 产生的..</p><p>当然，丢出异常我自己是认为 <strong>这样就无需返回值了</strong>，当然，理论上写其他实现也会被替换掉。</p><h1 id="调用隐藏-API"><a href="#调用隐藏-API" class="headerlink" title="调用隐藏 API"></a>调用隐藏 API</h1><p>言归正传，我们说说隐藏 API 的事。</p><h2 id="API-是-什么时候被隐藏的"><a href="#API-是-什么时候被隐藏的" class="headerlink" title="API 是 什么时候被隐藏的"></a>API 是 什么时候被隐藏的</h2><p>众所周知，javadoc 标注了 <code>@hide</code> 的方法、类、构造器、域 等就是被隐藏的，API 无法访问，但真机上有。</p><p>但是，Android 代码中是有这些东西的，为什么开发时找不到了呢..</p><p>编译 SDK 的时候，依照上文的介绍，所有方法之类的都会被填充 Stub ，生成 android.jar， <strong>这时，如果 hide，就不会被打包进去</strong>，也就无法访问了。（尚未仔细研究，个人推测分析）与其说是 “无法访问”，不如说是 “没有添加进 SDK，不存在”。</p><p>所以，如果在生成 Stub 的时候不管这些可恶的 hide，也就会照常生成这些隐藏 API。</p><h2 id="模仿-SDK-制作-Stub"><a href="#模仿-SDK-制作-Stub" class="headerlink" title="模仿 SDK 制作 Stub"></a>模仿 SDK 制作 Stub</h2><p>到了本文的核心部分。既然我们知道了 Android SDK 以及 hidden-api 的原理，我们就可以按需将隐藏的 API 添加到项目。</p><p>比如说，我需要访问 <code>android.os.Environment#UserEnvironment</code> 内部类，我们只需要做如下几步：</p><ul><li>创建 <code>android.os</code> 包，用于覆盖 SDK</li><li>把 SDK 中的 <code>Environment</code> 复制进去</li><li>在 <code>Environment</code> 中添加 <code>UserEnvironment</code> 内部类，同时按照 AOSP 源码添加方法签名，实现随便抛出异常。</li></ul><p>之后，编码访问 <code>UserEnvironment</code>，辣鸡鸡 idea 还会标红，这是因为它优先访问 SDK。但是实际编译中，<strong>自建的 Environment 类会覆盖 SDK 中的类</strong>，从而通过编译。</p><p>正是由于 <strong>自建的 Environment 类会覆盖 SDK 中的类</strong>，我们得以 “自己做 SDK ”  来调用这些 API，细看 黑域、Shkzuku、condom 都是这么做的。</p><h1 id="文末福利"><a href="#文末福利" class="headerlink" title="文末福利"></a>文末福利</h1><p>提供这两天编译 Android O 顺手（专门）弄的 带有隐藏 API 的 android.jar 一份~</p><blockquote><p>参考： <a href="http://www.wxtlife.com/2015/03/31/how-to-use-android-hide-methods-or-class/" target="_blank" rel="external">http://www.wxtlife.com/2015/03/31/how-to-use-android-hide-methods-or-class/</a></p></blockquote><p><strong>不带例如 Telephony、Services 这些与 Framework 分开的 jar</strong></p><p>地址：<a href="https://github.com/Trumeet/android-hidden-api/blob/master/android-26/android.jar" target="_blank" rel="external">点这儿</a></p><p>随手给 <a href="https://github.com/anggrayudi/android-hidden-api" target="_blank" rel="external">android-hidden-api</a> 提交了 <a href="http://www.wxtlife.com/2015/03/31/how-to-use-android-hide-methods-or-class/" target="_blank" rel="external">PR</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;现在，博主使用 hidden-api 有这几种途径：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反射&lt;/li&gt;
&lt;li&gt;编译好的 framework jar
      
    
    </summary>
    
      <category term="Android开发" scheme="https://blog.trumeet.top/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="隐藏 API" scheme="https://blog.trumeet.top/tags/%E9%9A%90%E8%97%8F-API/"/>
    
      <category term="Android SDK" scheme="https://blog.trumeet.top/tags/Android-SDK/"/>
    
  </entry>
  
  <entry>
    <title>Dir 的诞生和开发历程</title>
    <link href="https://blog.trumeet.top/2017/07/29/begin-dir/"/>
    <id>https://blog.trumeet.top/2017/07/29/begin-dir/</id>
    <published>2017-07-29T00:00:00.000Z</published>
    <updated>2017-09-20T10:44:21.977Z</updated>
    
    <content type="html"><![CDATA[<p>Dir —— Trumeet 在 2017年元旦开始的项目，专门治理Android上流氓软件/不规范的软件在存储卡乱存储文件，还你一个整洁的存储空间。这篇文章介绍我开发它的经历和初衷。Dir：<a href="https://dir.trumeet.top" target="_blank" rel="external">https://dir.trumeet.top</a></p><p><em>（顶部图片：atony）</em></p><h1 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h1><p>开发它的初心，还要从一次随意浏览手机开始说起。</p><p>某一天，我浏览手机里的文件，发现存储卡里面有许多APP乱创建的内容，它们肆无忌惮地把自己的 <code>缓存</code>、<code>日志</code> 甚至 <code>广告</code> 和 <code>用户标识</code> 存储在用户的 SD 卡里面。这也就像你的电脑硬盘里本应该是放你的文档、照片的地方，却杂乱无章地堆放了各种垃圾、小广告 还有你的隐私。甚至有些 APP 把临时图片/视频也丢进存储卡，还不忘及时删除或者加上 <code>.nomedia</code> 文件，这就导致我的 <code>Google 相册</code> 总提示我 <code>要不要备份xx缓存目录</code>.. 我很生气，这是我的个人目录，你们这样子随意丢垃圾肯定是不规范的。</p><h2 id="Android-目录规范"><a href="#Android-目录规范" class="headerlink" title="Android 目录规范"></a>Android 目录规范</h2><p>Android 文件系统有如下目录区分：</p><ul><li><p>私有目录（内部）</p><p>位于 <code>/data/data/&lt;包名&gt;/</code> 下，存放应用的私有内容，其他应用没有授权是无法访问的。它被设计为 <code>私有</code>，也就是说 <code>一般不和其他人共享，比较私密的内容</code>，用户需要访问也需要 <code>ROOT</code>。</p><p>在这个目录中，我们通常这样安排，如果你去随意打开一个应用的私有目录，它一般也是这样的：</p><p><code>cache</code> ：缓存。里面的文件大小会在 <code>应用详情 -&gt; 缓存大小</code> 里面显示，用户可以通过 <code>清除缓存</code> 删掉它的内容，所以不能放如 <code>设置</code> 等重要内容。</p><p><code>databases</code>： 数据库目录，里面存放数据库。</p><p><code>files</code> ： 文件目录，随意安排。</p><p><code>shared_prefs</code> ： 设置（SP）目录。</p><p>以上是常用的目录形式，当然，应用不按照规定也无伤大雅。因为这是放在私有目录中的，其他人（包括用户）都是无法访问的。</p></li><li><p>私有目录（外部）</p><p>位于 <code>SD卡/Android/data/&lt;包名&gt;/</code> 下，由于是 <code>外部</code>，就放在 SD 卡里，用户可以访问。自身程序可以无需存储权限访问，其他应用或用户需要存储卡权限。</p><p>由于任何人都可以访问，它一般放置一些不太重要、不太保密的内容。里面一般有：</p><p><code>files</code> ： 同上面 files</p><p><code>cache</code> ： 同上面 cache</p></li></ul><h2 id="不规范的猥琐做法"><a href="#不规范的猥琐做法" class="headerlink" title="不规范的猥琐做法"></a>不规范的猥琐做法</h2><p>也就是说，应用如果要存放缓存、广告、日志 都可以无需存储权限，放进自身目录，既保护了数据安全、方便系统统一管理（如用户 清除缓存），还保持存储卡简洁。最重要的，还能无需存储权限。但是就有一些应用，不知道是开发人员吔屎了、应用间分享数据（可以用 FileProvider）、需要应用间分享用户ID（非常恶心的做法，详见下文），还是怎么着.. 不管怎么说，他们都带来了很多副作用。</p><h2 id="插话：应用间分享用户ID"><a href="#插话：应用间分享用户ID" class="headerlink" title="插话：应用间分享用户ID"></a>插话：应用间分享用户ID</h2><p>许多流氓软件都为了统计或者追踪用户，把自己获取到的用户硬件ID（隐私信息，如 IMEI、Mac地址） 存放到存储卡，多个应用共享。比如说，有 10 个应用带有XX会读取隐私的SDK，它们只要有一个获取了手机权限，就会把拿到的隐私存到存储卡，这样其他9个只需存储权限就可以获取到用户ID，从而追踪用户、共享情报了。这是非常侵害用户隐私的行为，因为这个ID是终身的，和硬件绑定的，且唯一的。有一次，我在存储卡根目录发现了一个叫 <code>.imei</code> 的文件，打开看里面写着一串东西，应该就是某毒瘤获取到的隐私（IMEI）吧。</p><h2 id="不忍受，不认怼"><a href="#不忍受，不认怼" class="headerlink" title="不忍受，不认怼"></a>不忍受，不认怼</h2><p>见过一句话：</p><blockquote><p>要么忍受，要么改变。</p></blockquote><p>作为强迫症，我无法忍受自己的手机被肆意丢垃圾。我想起了酷安常见的一种拦截创建目录的方法：<code>使用同名文件替换文件夹</code>。这是由于 Unix 文件系统所致，替换后再操作会抛出 <code>Not a dictionary</code> 异常，这也就阻止瞎**创建了。Dir 有了雏形——专治随意创建。 Dir 也就是 <code>目录</code> 的简写（搞过 CMD 的童鞋应该知道）。</p><h2 id="还有一些原因"><a href="#还有一些原因" class="headerlink" title="还有一些原因"></a>还有一些原因</h2><p>还有一些原因，让我上了 Dir 的大船：</p><ul><li>市面上某些垃圾清理大师 <code>广告太多</code>，见过酷安某评论，清理完弹出女尸广告。我想找一款 <code>简单，无杂质</code> 的清理。</li><li>还有些比较良心的清理需要 ROOT。</li><li>大多数清理工具对小众APP、个人作品支持较差。</li></ul><p>为此，Dir 基本已定型，可以开始开发了。</p><h1 id="让我们开始吧"><a href="#让我们开始吧" class="headerlink" title="让我们开始吧"></a>让我们开始吧</h1><p>（原谅这节没写多少东西，因为许多 Bug 修完就忘了 &gt;&lt;）</p><h2 id="规则的概念"><a href="#规则的概念" class="headerlink" title="规则的概念"></a>规则的概念</h2><p>由于 Dir 不是针对规范路径的清理，也就无法根据通配符、表达式等方式进行匹配垃圾。所以我想到了 <code>规则数据库</code> 的方式，由客户端下载安装最新云端规则，然后根据规则进行清理。每一条规则有一个路径，对应一个APP，一个标题，还有其他属性。</p><h2 id="设计-APP"><a href="#设计-APP" class="headerlink" title="设计 APP"></a>设计 APP</h2><p>有了目标，我开始开发 Dir。最初就准备做一个 Activity，两个卡片——<code>同步规则</code> 和 <code>扫描</code>。但最后，放弃了这个想法。</p><p>很快地，第一个 Beta 发布了。我在酷安邀请大家来参与公测，测试中，也发现了许多问题。</p><p>逐一修复后，觉得差不多了，便发布了正式版。反响很好，用户都表示 【神器】.. 也鼓励我继续开发它。</p><p>人多力量大。后来，我还加入了 规则贡献 等功能，通过给我提交垃圾文件规则，可以拿到完整版的兑换码，鼓励大家一起来建设这个项目。</p><p>许多用户反馈 界面太丑，我在5月份更新了 UI，全面的 Material 风格，让 Dir 用着更舒服..</p><p>许多热心用户来反馈问题，更有帮我 设计、画图、制作官网的热心<em>基佬</em>，他们很大地帮助了 Dir 的进步。</p><p>以下是我遇到的一些问题：</p><h3 id="第一个问题：同步规则"><a href="#第一个问题：同步规则" class="headerlink" title="第一个问题：同步规则"></a>第一个问题：同步规则</h3><p>如何同步？由于我不懂数据库，最初，我是每次同步时删除所有本地规则，然后再下载、保存.. 后来发布一段时间，觉得这样太慢。所以换成了 <code>增量</code> 的方案，先将本地规则路径存入 <code>Set</code>，然后在下载云端数据后每次保存前使用 <code>contains</code> 判断是否本地已有，如果有就跳过。这样大幅度提高了效率。</p><p>在这样发布一段时间后，又遇到了新的问题：</p><p><strong>本地重复</strong>。由于规则没有一个固定格式，就导致一旦云端的路径修改（<code>ABC</code> 变成了 <code>/ABC</code>），实际效果相同，但是在<code>contains</code> 的时候就被认为两条，最终多次存储，导致重复。最终，我将每条路径都进行了处理，统一为 <code>/XXX</code> 的形式，保证了本地无重复。</p><p><strong>本地现有规则不会更新</strong> 如果某规则在云端进行了更新（如标题变更），本地在判断时就会跳过，从而不会更新。为此，我更换了思路，使用SQL的 <code>unique</code> 功能，然后每次不进行本地判断，使用目录作为唯一列，直接存储。这样就会在本地已有这个路径的时候更新这条规则的详情，从而不创建新的项。这样做好处就在于解决了这两个问题，但是速度会变慢。</p><h3 id="规则太少"><a href="#规则太少" class="headerlink" title="规则太少"></a>规则太少</h3><p>最初只有几十条规则，有些热心用户邮件发来了一些，我需要每次都手动加入后台，数量少还很累。于是，<strong>用户贡献规则</strong> 的想法便萌生了。起初，我准备允许用户 <code>提交</code>、<code>修改</code>、<code>下架</code> 这三个操作，但是觉得工作量太大，最终只保留了 <code>提交</code>，用户手机上编辑规则后，提交管理员审核，随后再存入数据库。最终规则已过千条，支持许多软件。</p><h3 id="后端程序"><a href="#后端程序" class="headerlink" title="后端程序"></a>后端程序</h3><p>Telegram 群里大佬说，要尽可能地少把数据放到客户端。所以按照正常做法，规则提交等功能都是调用后台程序完成的。最初为了图省事，直接用的 LeanCloud 云函数（如同 FireBase Function），但简直天价，最低 6RMB/天，价格感人。然后，我借着组VPS的机会自己琢磨了后端，写了 RestFul API （也没有读过什么规范，反正自己够用就行 大雾），这样就能节省很多开支，而且程序完全由自己做主，自由、安全。</p><blockquote><p>详见：<a href="https://blog.trumeet.top/2017/06/14/webservlet-jetty-appserver/">https://blog.trumeet.top/2017/06/14/webservlet-jetty-appserver/</a></p></blockquote><h1 id="结语和感谢"><a href="#结语和感谢" class="headerlink" title="结语和感谢"></a>结语和感谢</h1><p>开发中还遇到了许多问题，我都在尝试一一解决，在这个项目中，我也涨了不少姿势。这个项目也受到了大家的好评。开发它7个月了，我没有停下，努力把它做得更好，回报各位的支持。</p><p>以下是 Dir 比较重要版本的截图和历史，留作纪念：</p><ul><li><p>1.0 Beta 最初版 （1月12日）</p><p><img src="https://i.loli.net/2017/07/29/597c0ec4a78f9.png" alt="1.0.png"><img src="https://i.loli.net/2017/07/29/597c0ec4dde1f.png" alt="1.0-1.png"></p></li><li><p>1.5 第一个正式版（1月18日）</p><p>界面和最初一样</p></li><li><p>规则提交工具 发布首个测试版，开始接受贡献规则（4月17日）</p></li><li><p>v1.31_build38-beta 界面大改，全面 Material 设计 （5月1日）</p><p><img src="https://i.loli.net/2017/07/29/597c101e67249.png" alt="1.31.png"></p><p><img src="https://i.loli.net/2017/07/29/597c101e66103.png" alt="1.31-1.png"><img src="https://i.loli.net/2017/07/29/597c101e84b49.png" alt="1.31-2.png"></p></li></ul><p>硬广时间：非常感谢这个项目，让我学到了很多东西，也感谢所有为Dir做出贡献的人，它仍在继续，会做得更好！</p><hr><p><a href="https://dir.trumeet.top" target="_blank" rel="external">文章看完了，带走一只Dir</a> （这个主页也是热心用户 neoFelhz 帮忙设计的 &gt;&lt;）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Dir —— Trumeet 在 2017年元旦开始的项目，专门治理Android上流氓软件/不规范的软件在存储卡乱存储文件，还你一个整洁的存储空间。这篇文章介绍我开发它的经历和初衷。Dir：&lt;a href=&quot;https://dir.trumeet.top&quot; target=
      
    
    </summary>
    
      <category term="作品集" scheme="https://blog.trumeet.top/categories/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    
      <category term="回忆" scheme="https://blog.trumeet.top/tags/%E5%9B%9E%E5%BF%86/"/>
    
      <category term="软广" scheme="https://blog.trumeet.top/tags/%E8%BD%AF%E5%B9%BF/"/>
    
  </entry>
  
  <entry>
    <title>尽管是咸鱼，但仍在前行</title>
    <link href="https://blog.trumeet.top/2017/07/13/why-trumeet/"/>
    <id>https://blog.trumeet.top/2017/07/13/why-trumeet/</id>
    <published>2017-07-13T16:40:00.000Z</published>
    <updated>2017-09-20T10:44:22.001Z</updated>
    
    <content type="html"><![CDATA[<p>嘛，都知道 Trumeet 是咸鱼。Trumeet在自学开发，有一些东西掌握得不是很深♂入。 前一段看逼乎，里面有个dalao回答说，<strong>国人的博客都不要看，除了几个大神的。好多都没有经过实践，最终误导了你。这是不负泽任的做法。</strong> Trumeet 作为咸鱼，觉得深有感触..</p><h1 id="转载与误导"><a href="#转载与误导" class="headerlink" title="转载与误导"></a>转载与误导</h1><p>以前上网查东西，尤其是中文内容（不管某度还是某谷），都能看见一个结果<strong>千篇一律</strong>地被丢在屏幕里（</p><p>这是什么？这是转载。Trumeet 不否认转载，但是它的确给作为咸鱼的我们带来了诸多不便。</p><p>再说说误导。的确有些博客不负责任，写的文章没有经过验证，最终误导了新手党，这是非常不好的事情。但是，这种也只是一少部分，大多数普通博客（非网上知名dalao：stormzhang之类）还是写得不错的，值得一读。</p><h1 id="坚持写咸鱼文章"><a href="#坚持写咸鱼文章" class="headerlink" title="坚持写咸鱼文章"></a>坚持写咸鱼文章</h1><p>再说说 Trumeet 的做法。记得stormzhang说过他为什么写博客——<strong>知识的总结 项目开发中也许学到了一个技能，或者一个知识点，但是通过写博客会加深巩固自己学习的东西，自己写不出来可能说明你对这个知识点理解还不够深入。  </strong> Trumeet 认为说得不错，在进步之余将自己学习的知识记录、总结下是非常重要的。所以，我一直坚持写一些博客，不是想教别人：我没这个资格；而是想总结自己撸码过程中遇到的一些问题和学到的东西。但写博客同时也要避免上述问题，Trumeet 为了保证读者质量，也为了尽力防止千篇一律问题发生，一直坚持着 <strong>不转载</strong> ，一般不转载他人文章，如果转载会积极说明。同时，Trumeet 的所有文章没有经过本鱼允许也 <strong>不得转载</strong>。同时，在自己含糊的地方都标注了类似 <strong><del>咸鱼看法，</del>仅供参考</strong> 字样，让大家不要掉进 Trumeet 挖的坑里。同时，也很鼓励dalao指出其中的不足之处，帮助更多的人~</p><h1 id="推荐一些大神"><a href="#推荐一些大神" class="headerlink" title="推荐一些大神"></a>推荐一些大神</h1><p>说了这么多，我们还是推荐一些dalao的博客，都很有质量。</p><ul><li>Stormzhang（stormzhang.com ， 微信公众号）</li><li>码个蛋（微信公众号）</li><li>阿里技术（微信公众号）</li><li>WeMobileDev（微信移动开发团队，这是公众号）</li><li><del>咸鱼等你来补充</del></li></ul><p><code>勿忘初心，才能方得始终！</code> ——stormzhang</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;嘛，都知道 Trumeet 是咸鱼。Trumeet在自学开发，有一些东西掌握得不是很深♂入。 前一段看逼乎，里面有个dalao回答说，&lt;strong&gt;国人的博客都不要看，除了几个大神的。好多都没有经过实践，最终误导了你。这是不负泽任的做法。&lt;/strong&gt; Trumeet
      
    
    </summary>
    
      <category term="Android开发" scheme="https://blog.trumeet.top/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="咸鱼" scheme="https://blog.trumeet.top/tags/%E5%92%B8%E9%B1%BC/"/>
    
      <category term="博客" scheme="https://blog.trumeet.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="人生经验" scheme="https://blog.trumeet.top/tags/%E4%BA%BA%E7%94%9F%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>app_process与UID</title>
    <link href="https://blog.trumeet.top/2017/07/10/appprocess-uid/"/>
    <id>https://blog.trumeet.top/2017/07/10/appprocess-uid/</id>
    <published>2017-07-10T19:04:00.000Z</published>
    <updated>2017-09-20T10:44:21.977Z</updated>
    
    <content type="html"><![CDATA[<p>app-process 与 内部运行的Java 程序的UID是如何决定的 呢..</p><p>读不懂 C，Trumeet 需要去实践一下（</p><h1 id="Root"><a href="#Root" class="headerlink" title="Root"></a>Root</h1><p>使用 Root 执行 app_process 可行，可以去看一下 Shizuku、黑域，它们是可以通过 Root 启动的（</p><p>启动后，通过 <code>ps</code> 查看UID：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">root      4805  1     2799728 27316            0000000000 S rikka_server</div><div class="line">...</div></pre></td></tr></table></figure><p>可以看出是和Root一个UID</p><h1 id="ADB"><a href="#ADB" class="headerlink" title="ADB"></a>ADB</h1><p>和上面一样嘛..</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">shell     31552 1     2798140 40736          0 7fb01ba0b4 S rikka_server</div><div class="line">...</div></pre></td></tr></table></figure><p>和 Shell 是一个UID</p><h1 id="普通应用"><a href="#普通应用" class="headerlink" title="普通应用"></a>普通应用</h1><p>使用手机上的终端启动一下 Shizuku..</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">u0_a141   4916  1     65680  14856            0000000000 R rikka_server</div><div class="line">...</div></pre></td></tr></table></figure><p>和那个应用UID是一样的（</p><p>也就是说 app_pocess 内的Java程序是和启动者的UID一致，而不是只允许Shell/Root调用app_process（</p><p>普通应用启动，UID也是普通应用的，想获取一些系统权限照样是不行的，保障了安全（</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;app-process 与 内部运行的Java 程序的UID是如何决定的 呢..&lt;/p&gt;
&lt;p&gt;读不懂 C，Trumeet 需要去实践一下（&lt;/p&gt;
&lt;h1 id=&quot;Root&quot;&gt;&lt;a href=&quot;#Root&quot; class=&quot;headerlink&quot; title=&quot;Root&quot;&gt;
      
    
    </summary>
    
      <category term="Android开发" scheme="https://blog.trumeet.top/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="app_process" scheme="https://blog.trumeet.top/tags/app-process/"/>
    
  </entry>
  
  <entry>
    <title>Zygote与app_process的启动与作用</title>
    <link href="https://blog.trumeet.top/2017/07/10/zygote-appprocess-init/"/>
    <id>https://blog.trumeet.top/2017/07/10/zygote-appprocess-init/</id>
    <published>2017-07-10T19:02:00.000Z</published>
    <updated>2017-09-20T10:44:22.009Z</updated>
    
    <content type="html"><![CDATA[<p>前几天看一篇文章：<a href="http://www.cnblogs.com/samchen2009/p/3294713.html" target="_blank" rel="external">http://www.cnblogs.com/samchen2009/p/3294713.html</a>，里面说 <strong>Zygote是由app_process启动的</strong>，然后看 GitYuan 的文章，说 <strong>Zygote是由Init直接启动的</strong>，当时对这两个东西没有太深入研究，困惑 Trumeet</p><p>这几天再查了查，搞明白（</p><blockquote><p>参考文献：<a href="http://www.judymax.com/archives/1118" target="_blank" rel="external">http://www.judymax.com/archives/1118</a></p></blockquote><h1 id="首先-Zygote-是什么"><a href="#首先-Zygote-是什么" class="headerlink" title="首先 Zygote 是什么"></a>首先 Zygote 是什么</h1><p><del>写在前面，辣鸡博客纯属个人理解，可能有误，希望不要误导到想我这样的萌新，也更希望dalao指正</del></p><p>许多文章中都写得很明白了，Zygote是Android应用、SystemServer的孵化池。</p><p>但是，它是一个类似 app_process 这样的二进制程序吗？Trumeet 觉得不是</p><p><strong>而是由app_process启动的Java程序，负责注册Socket、fork、初始化SystemServer等操作</strong>。</p><p> 至于为什么叫 Zygote，只不过是名字罢了。</p><p><code>/init.zygote32.rc</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server</div><div class="line">    class main</div><div class="line">    socket zygote stream 660 root system</div><div class="line">    onrestart write /sys/android_power/request_state wake</div><div class="line">    onrestart write /sys/power/state on</div><div class="line">    onrestart restart audioserver</div><div class="line">    onrestart restart cameraserver</div><div class="line">    onrestart restart media</div><div class="line">    onrestart restart netd</div><div class="line">    writepid /dev/cpuset/foreground/tasks</div></pre></td></tr></table></figure><p>可以看到，<code>service zygote ...</code> 是指使用 /system/bin/app_process -Xzygote….. 创建一个名叫 Zygote 的进程。<code>-Xzygote是告诉app_pcocess启动Zygote（定位到ZygoteInit）</code></p><h1 id="然后-app-process-是什么"><a href="#然后-app-process-是什么" class="headerlink" title="然后 app_process 是什么"></a>然后 app_process 是什么</h1><p>该打 Google，这个话题查了好久都没有找到相关明确说明 &gt;&lt;</p><p>同样跟着 Trumeet 思路的话，这个可以被理解为 <strong>Android上的JVM</strong>，就是用来跑 <strong>.class .jar</strong> 用的，它们在 Android 叫 <strong>.dex</strong>，拆包APK看一下里面都有这个文件（</p><p>如果是这样 就和前面连上了，<strong>app_process是任何Java字节码的载体</strong>，<strong>Zygote是一个普通的Java程序，由init调用app_process启动，最后把自己改名 Zygote 跑掉了</strong> （</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天看一篇文章：&lt;a href=&quot;http://www.cnblogs.com/samchen2009/p/3294713.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/samchen2009/p/
      
    
    </summary>
    
    
      <category term="app_process" scheme="https://blog.trumeet.top/tags/app-process/"/>
    
      <category term="Zygote" scheme="https://blog.trumeet.top/tags/Zygote/"/>
    
      <category term="Android启动" scheme="https://blog.trumeet.top/tags/Android%E5%90%AF%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>那些年，让我【为之一振】的库</title>
    <link href="https://blog.trumeet.top/2017/06/11/asesome-android-libraries/"/>
    <id>https://blog.trumeet.top/2017/06/11/asesome-android-libraries/</id>
    <published>2017-06-11T00:00:00.000Z</published>
    <updated>2017-09-20T10:44:21.977Z</updated>
    
    <content type="html"><![CDATA[<p>这些库你可能都听说过，本文主要介绍让我感受到 <code>震惊</code> 的Android开源库，推荐给还没有用的人。</p><h1 id="ButterKnife"><a href="#ButterKnife" class="headerlink" title="ButterKnife"></a>ButterKnife</h1><p>大名鼎鼎的ButterKnife，当初我烦死了每次都要重复写的 <code>TextView tv = (TextView) findViewById(R.id.text)</code> ，真是扎心了呢。当然还有这个，眼不见心不烦：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">view.setOnClickListener (<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span> <span class="params">(View v)</span> </span>&#123;</div><div class="line">    <span class="comment">// TODO</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>当我发现可以用 <code>@BindView(R.id.text)</code> 和 <code>@OnClick(R.id.view)</code>实现上述<del>恶心</del>代码的时候，顿时惊呆了（X。这个库可谓是人人知晓了，非常有名，大幅提升了效率。同时，可以搭配 <a href="https://github.com/avast/android-butterknife-zelezny" target="_blank" rel="external">android-butterknife-zelezny</a> AndroidStudio插件，在代码的 <code>layout资源引用部分（如 R.layout.activity_main）</code> <strong>打开生成菜单（我比较习惯 <code>alt+insert</code>）</strong>，选择 <code>Generate Butterknife Injections</code> 随后就很明白啦！</p><p>地址：<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">https://github.com/JakeWharton/butterknife</a></p><p>推荐一个很棒的教程：<a href="http://dev.qq.com/topic/578753c0c9da73584b025875" target="_blank" rel="external">http://dev.qq.com/topic/578753c0c9da73584b025875</a></p><hr><h1 id="Android-Universal-Image-Loader"><a href="#Android-Universal-Image-Loader" class="headerlink" title="Android-Universal-Image-Loader"></a>Android-Universal-Image-Loader</h1><p>先说说我是怎么认识这个库的。以前做一些图片加载相关项目，一直没有想过缓存相关概念，直到发觉 <code>每次都重新加载，浪费资源</code>、<code>加载速度慢</code> 等问题，才想起了 <code>缓存</code>。然后从 <code>Sorcery图标包</code>（在此特别感谢Sorcery图标包，让我发现了很多很棒的库子）等项目中发现了这个库，缓存图片、加载图片都做得很简单。同时，也有一些别的图片加载框架，<code>Glide</code>、<code>Picasso</code> 等。</p><p>地址：<a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">https://github.com/nostra13/Android-Universal-Image-Loader</a></p><hr><h1 id="OkHttp"><a href="#OkHttp" class="headerlink" title="OkHttp"></a>OkHttp</h1><p>我是从LeanCloud SDK中开始尝试使用OkHttp的，以前的<em>*</em>Connection就不提了啊（逃</p><p>一下子才发现网络请求竟如此简单，如我需要一个Get请求，直接定义一个 <code>Request</code>，通过 <code>OkHttpClient</code> 就拿到了 <code>Response</code> ，太简单了！但是我也没有仔细使用过OkHttp，就不多阐述了。到后面还有比它更简单的（</p><p>地址：<a href="https://github.com/square/okhttp" target="_blank" rel="external">https://github.com/square/okhttp</a></p><hr><h1 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h1><p>在此之前，我都是用 <code>AsyncTask</code> 做异步操作的，虽然也很不错，但是为了体验一下风靡的RxJava，就试了一下。感觉到代码简洁了不少（与其说简洁，不如说 <strong>看起来更舒服了，也就是<code>可读性更佳</code></strong>）。 我们来一起对比两段代码，其作用是从网络上加载一个图片到ImageView，具体网络请求（图片加载）就不写了：</p><p><del>PS: 基本上手打的，有Typo见谅</del></p><p>AsyncTask</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadImageTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>, <span class="title">Bitmap</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">private</span> ImageView mImageView;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LoadImageTask</span> <span class="params">(ImageView imageView)</span> </span>&#123;</div><div class="line">    mImageView = imageView;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span> <span class="params">(String... args)</span> </span>&#123;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> Load image from network</span></div><div class="line">    <span class="keyword">return</span> bitmap;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span> <span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">    mImageView.setImageBitmap(bitmap);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MainActivity -&gt; 调用之</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> LoadImageTask mTask;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span> <span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate (savedInstanceState);</div><div class="line">    <span class="comment">// Bind Views</span></div><div class="line">    </div><div class="line">    <span class="comment">// 到这里该执行任务了</span></div><div class="line">    mTask = <span class="keyword">new</span> LoadImageTask (imageView);</div><div class="line">    mTask.execute (<span class="string">"某URL [doge原谅ta]"</span>);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 在onDestroy的时候取消任务</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mTask != <span class="keyword">null</span> &amp;&amp; !mTask.isCancelled()) &#123;</div><div class="line">      mTask.cancel(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>再看看RxJava1实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> Subscription mLoadSubscription;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span> <span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate (savedInstanceState);</div><div class="line">    <span class="comment">// Bind Views</span></div><div class="line">    </div><div class="line">    <span class="comment">// 创建Observable</span></div><div class="line">    Observable&lt;Bitmap&gt; observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Bitmap&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Bitmap&gt; subscriber)</span> </span>&#123;</div><div class="line">                <span class="comment">// <span class="doctag">TODO:</span> Load image from network</span></div><div class="line">              subscriber.onNext(bitmap);</div><div class="line">              subscriber.onCompeleted();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    <span class="comment">// 到这里该执行任务了</span></div><div class="line">    mLoadSubscription = observable.subscribeOn(Schedulers.io())</div><div class="line">      .observeOn(AndroidSchedulers.mainThread())</div><div class="line">      .subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span> <span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">          imageView.setImageBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">      &#125;, <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span> <span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">          <span class="comment">// 加载失败回掉，太贴心了</span></div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 在onDestroy的时候取消订阅</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mLoadSubscription != <span class="keyword">null</span> &amp;&amp; !mLoadSubscription.isUnsubscribed()) &#123;</div><div class="line">      mLoadSubscription.unsubscribe();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当时尤为喜欢 <code>onNext</code>、<code>onCompeleted</code>、<code>onError</code> 和 <code>subscribeOn</code>、<code>observeOn</code>，觉得真是贴心啊。</p><p>地址：<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">https://github.com/ReactiveX/RxJava</a></p><p>推荐教程：<a href="https://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">https://gank.io/post/560e15be2dca930e00da1083</a></p><hr><h1 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h1><p>没错就是它！以前没有怎么用过RestAPI，直到后来，才发现每个请求都用OkHttp <code>Request</code>再 <code>Response</code> 太恶心了。然后发现了 Retrofit 这个好东西，简直大爱。 把所有API都写进接口，要什么请求/参数直接 <code>注解</code> ，然后 <strong><code>retrofit.create()</code></strong> 竟完成了上述几乎所有操作！！！<del>男人看了沉默，女人看了流泪</del>，我当时真心觉得 【还能这么玩】，太厉害了。比如，我们需要一些请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">APIInterface</span> </span>&#123;</div><div class="line">  <span class="meta">@GET</span>(<span class="string">"xxx"</span>)</div><div class="line">  Call&lt;结果Bean&gt; getXXX();</div><div class="line">  </div><div class="line">  <span class="meta">@POST</span>(<span class="string">"send"</span>)</div><div class="line">  <span class="function">Call&lt;AAA&gt; <span class="title">send</span> <span class="params">(@Query(<span class="string">"param"</span>)</span> String param, @<span class="title">Body</span><span class="params">(<span class="string">"body"</span>)</span> String body)</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 然后造一个APIManager</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APIManager</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> APIInterface api;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">APIManager</span> <span class="params">()</span> </span>&#123;</div><div class="line">    Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">      .baseUrl(<span class="string">"每个请求地址前面都会自动加上这个地址，真贴心"</span>)</div><div class="line">      .build();</div><div class="line">    api = retrofit.create(APIInterface.class);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> Call&lt;XXX&gt; <span class="title">getXXX</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> api.getXXX();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> Call&lt;AAA&gt; <span class="title">send</span> <span class="params">(String param, String body)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> api.send (param, body);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>地址：<a href="https://github.com/square/retrofit" target="_blank" rel="external">https://github.com/square/retrofit</a></p><p>Retrofit+RxJava+Gson简直太爽了，吐血推荐：<a href="https://gank.io/post/56e80c2c677659311bed9841" target="_blank" rel="external">https://gank.io/post/56e80c2c677659311bed9841</a></p><hr><h1 id="Gson"><a href="#Gson" class="headerlink" title="Gson"></a>Gson</h1><p>并不代表 <code>Gson</code> 这一个库，而是 <code>Json序列化</code>。 当我还在苦苦地这样写时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">JSONBean bean = <span class="keyword">new</span> JSONBean();</div><div class="line">bean.setValue(jsonObject.getString(<span class="string">"value"</span>));</div><div class="line">bean.setA(jsonObject.getInt(<span class="string">"A"</span>));</div><div class="line"><span class="comment">// 默哀N行 get</span></div><div class="line"><span class="keyword">return</span> bean;</div></pre></td></tr></table></figure><p>才得知可以直接 <code>反序列化Json</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONBean</span> </span>&#123;</div><div class="line">  <span class="meta">@SerializedName</span>(<span class="string">"value"</span>)</div><div class="line">  <span class="keyword">private</span> String value;</div><div class="line">  <span class="meta">@SerializedName</span>(<span class="string">"A"</span>)</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> A;</div><div class="line">  <span class="comment">// getter、setter</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> JSONBean <span class="title">parse</span> <span class="params">(String json)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Gson().fromJson(json, JSONBean.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>厉害了呢~ 同时还有许多Json序列化库：<code>Fastjson</code>、<code>LoganSquare</code>等。</p><p>链接：<a href="https://github.com/google/gson" target="_blank" rel="external">https://github.com/google/gson</a></p><p>推荐一系列教程：你真的会用Gson吗 <a href="http://www.jianshu.com/p/e740196225a4" target="_blank" rel="external">http://www.jianshu.com/p/e740196225a4</a></p><p>一个一键生成模型的AS插件，支持多种Json库和Kotlin，非常棒：<a href="https://github.com/robohorse/RoboPOJOGenerator" target="_blank" rel="external">RoboPOJOGenerator</a></p><hr><h1 id="AutoValue"><a href="#AutoValue" class="headerlink" title="AutoValue"></a>AutoValue</h1><p>我们先来看一个Model：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoolGay</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String id;</div><div class="line">  <span class="keyword">private</span> String username;</div><div class="line">  <span class="keyword">private</span> String email;</div><div class="line">  <span class="keyword">private</span> Date registerTime;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> replyCount;</div><div class="line">  <span class="keyword">private</span> String description;</div><div class="line">  <span class="comment">// 省略N个属性</span></div><div class="line">  </div><div class="line">  <span class="comment">// getter、setter</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.id;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span> <span class="params">(String id)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 省略N个getter、setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>虽然 getter 和 setter 可以用IDE一键生成，但是还是看着很不舒服了吧。然后隆重介绍这个库：AutoValue。 Google出的，在Google的不少APP里面都能见到（详情去看开放源代码许可），讲个笑话，我一直以为这和 <code>AndroidAuto（开车的）</code> 有什么关系呢2333。下面把刚才的那个模型用AutoValue生成一番：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@AutoValue</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoolGay</span> </span>&#123;</div><div class="line">  <span class="comment">// 天哪，一行代码就解决了问题？！</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">id</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">username</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">email</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Date <span class="title">registerTime</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">replyCount</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">description</span><span class="params">()</span></span>;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CoolGay <span class="title">create</span><span class="params">(String id, String username, String email, </span></span></div><div class="line"><span class="function"><span class="params">                              Date registerTime, <span class="keyword">int</span> replyCount, String description)</span></span>&#123;</div><div class="line">    <span class="comment">// 这个 AutoValue_CoolGay 是 AutoValue 自动编译时生成的</span></div><div class="line">    <span class="keyword">new</span> AutoValue_CoolGay(id, username, email, registerTime, replyCount, String description);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>还有 <code>equals()/hashcode()/tostring()</code> 甚至是 <code>Builder</code>、<code>Gson</code>、<code>Parcelable（非官方）</code> 生成，写模型太简单了。</p><p>地址：<a href="https://github.com/google/auto" target="_blank" rel="external">https://github.com/google/auto</a></p><p>教程推荐：<a href="http://tedyin.me/2016/04/11/auto-value/" target="_blank" rel="external">http://tedyin.me/2016/04/11/auto-value/</a>  以及 <a href="https://juejin.im/entry/57d2552d128fe10055150c9c" target="_blank" rel="external">https://juejin.im/entry/57d2552d128fe10055150c9c</a></p><hr><p>我目前还没有详细了解它们的源码，以后要仔细学习的。这些库给我们开发提供了很大便利，支持他们，大家一定要写上开放源代码许可，这是对作者的支持。同时忠告一下，一些小项目也没必要非得用这些库，还是 <code>能不就不</code>，尽量不重复早轮子，但也不要让程序过于臃肿。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这些库你可能都听说过，本文主要介绍让我感受到 &lt;code&gt;震惊&lt;/code&gt; 的Android开源库，推荐给还没有用的人。&lt;/p&gt;
&lt;h1 id=&quot;ButterKnife&quot;&gt;&lt;a href=&quot;#ButterKnife&quot; class=&quot;headerlink&quot; title=&quot;B
      
    
    </summary>
    
      <category term="Android开发" scheme="https://blog.trumeet.top/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="https://blog.trumeet.top/tags/Android%E5%BC%80%E5%8F%91/"/>
    
      <category term="干货" scheme="https://blog.trumeet.top/tags/%E5%B9%B2%E8%B4%A7/"/>
    
  </entry>
  
  <entry>
    <title>Bmob SDK导致应用出现广告始末</title>
    <link href="https://blog.trumeet.top/2017/06/07/bmob-pay-result/"/>
    <id>https://blog.trumeet.top/2017/06/07/bmob-pay-result/</id>
    <published>2017-06-07T00:00:00.000Z</published>
    <updated>2017-09-20T10:44:21.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最初的事件"><a href="#最初的事件" class="headerlink" title="最初的事件"></a>最初的事件</h1><p>相信大家已经阅读了这篇文章：<a href="https://hexo.trumeet.top/2017/05/28/bmob-seo/" target="_blank" rel="external">关于 Bmob SDK导致应用出现后台广告的调查</a></p><p>事情就是这样发生的。随后我将这篇文章转载到了<a href="https://zhuanlan.zhihu.com/p/27161542" target="_blank" rel="external">知乎</a>，<a href="https://juejin.im/entry/592eb4c50ce4630057aa8cf7/detail" target="_blank" rel="external">掘金</a>也进行了转载。</p><h1 id="官方人员的回应"><a href="#官方人员的回应" class="headerlink" title="官方人员的回应"></a>官方人员的回应</h1><p>文章发布3天后，Bmob 官方认为这件事严重影响了其声誉，并认为 <strong>他们的SDK并没有相关问题</strong> ，并 <strong>联系我希望查清楚此事</strong>。</p><p>首先，他们在文章评论和酷安回复我要求取得联系：</p><p><img src="https://ooo.0o0.ooo/2017/06/07/59375ead4882f.png" alt="小小琪是Bmob官方人员"></p><h1 id="配合调查"><a href="#配合调查" class="headerlink" title="配合调查"></a>配合调查</h1><p>我通过邮件与Bmob进行联系， <strong>配合他们调查，并提供了相关抓包、APK等结果</strong>。 与此同时，Bmob说这也可能是运营商劫持等导致。</p><p><img src="https://ooo.0o0.ooo/2017/06/07/59375fe8669b2.png" alt="配合调查部分联系截图"></p><h1 id="调查结果"><a href="#调查结果" class="headerlink" title="调查结果"></a>调查结果</h1><p>过了几天之后，Bmob公布了调查结果：<a href="http://www.bmob.cn/repository/detail/3690" target="_blank" rel="external">http://www.bmob.cn/repository/detail/3690</a> ，总结原因如下：</p><ul><li>接入的Bmob相关SDK并非正版，而是经过二次打包、写入恶意代码的版本。首先，要确定sdk是从官网而非其它平台下载；其次，也不要直接沿用其它平台(如github、csdn等)的开源项目进行开发；最后，即使是在官方下载sdk时，也要确保下载的文件未经劫持(如路由器劫持、浏览器劫持、甚至是系统劫持等)，这一点需要Bmob在SDK下载页面公布每个官方SDK的md5/sha1，以便开发者下载后进行核验。</li></ul><ul><li>由于Bmob审核流程的不严谨，可能导致某个版本的SDK中包含恶意广告代码。Bmob将加强内部监督和管理，规范产品上线审核流程；Bmob技术团队将尽量不使用、少使用其它团队开发的库(包括开源)。功能性的部件全部由Bmob开发人员造轮子；上线前除了功能性测试外，还要进行完整的上述过程的检测。</li></ul><ul><li>广告投放者有意避开了上述测试环境进行广告的投放，例如避开比目公司所在地区进行投放、避开某些机型进行投放、检测到有被抓包可能时停止投放等。上述检测过程已经考虑到了这种可能性，使用VPS全局代理，利用多个国家、国内多个省份的ip进行检测，使用多种机型进行检测等，但并不能完全排除这种可能；为避免广告选择在手机未连接Wifi时投放(一般情况下，手机用自身GPRS上网则很难利用PC进行抓包，利用tcpdump抓包则不难)，事后我们人工抽样了其中约10款应用，完全模拟使用GPRS上网的正常用户来使用应用，其中一半通过观察流量来判断，另一半通过tcpdump检测，均未发现异常，但由于时间有限样本较小，也只能排除一定可能性。</li></ul><ul><li>广告投放者在看到开发者反馈该类现象后，关停了广告投放的行为。即使行为不存在，代码还是存在的，Bmob工作人员将在空余时间继续对有疑问的App进行代码审查，如果有类似情况的用户也请主动联系官方客服提供帮助。</li><li>广告投放具有限制或地域性。这种可能性最有可能是通过网络劫持达成，例如应用为了呈现H5页面用到了浏览器，网络劫持可以让浏览器做他们想做的事情。</li></ul><hr><p>至此，由于并没有在Bmob那里找到明确结论，他们指出了可能的原因（如劫持等），所以此事暂时了结。</p><p><strong>特别强调：若转载本文，请注明出处。如有异议，欢迎及时联系我。有文笔疏忽指出，望谅解、指出，谢谢支持</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最初的事件&quot;&gt;&lt;a href=&quot;#最初的事件&quot; class=&quot;headerlink&quot; title=&quot;最初的事件&quot;&gt;&lt;/a&gt;最初的事件&lt;/h1&gt;&lt;p&gt;相信大家已经阅读了这篇文章：&lt;a href=&quot;https://hexo.trumeet.top/2017/05/28
      
    
    </summary>
    
      <category term="大新闻" scheme="https://blog.trumeet.top/categories/%E5%A4%A7%E6%96%B0%E9%97%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次宕机</title>
    <link href="https://blog.trumeet.top/2017/05/30/server-downtime/"/>
    <id>https://blog.trumeet.top/2017/05/30/server-downtime/</id>
    <published>2017-05-30T18:11:00.000Z</published>
    <updated>2017-09-20T10:44:22.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>事情是这样的。我准备把位于英国机房的VPS换到日本去，随后按照网上说法，先 <code>Snapshot</code>， 新建实例后恢复。</p><p>我备份快照之后，想新建一个实例，但是好像只能有一个？？<del>（全是洋文没仔细读）</del> 随后就 <code>Destroy</code> 了现在的，去建了个新的VPS，然后恢复。之后改了DNS A记录，主页能够正常访问，一切似乎进展顺利…</p><h1 id="Root密码忘记了"><a href="#Root密码忘记了" class="headerlink" title="Root密码忘记了"></a>Root密码忘记了</h1><p>为了安全性，我一直用的是默认生成的很复杂的一串 Root密码，但是在恢复Snapshot后 <code>后台显示的Root密码仍然是创建实例时生成的，但是VPS里面的密码已经恢复为Snapshot里的了</code>！ 我也没有备份密码，糟了（</p><p>去查了相关资料 <a href="https://www.vultr.com/docs/boot-into-single-user-mode-reset-root-password" target="_blank" rel="external">1</a> <a href="http://vultr.wang/tag/vultr%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81/" target="_blank" rel="external">2</a> 后，解决了这个问题：</p><ul><li>进入 <a href="my.vultr.com">Vultr后台</a>， 选择你的服务器。</li><li>点击右上角 <code>View Console</code> 按钮</li><li>等待进入登录Console界面，点击右上角发送 <code>Ctrl+Alt+Delete</code> 按钮，随后使劲按 <code>Esc</code>，直到显示蓝色的 <code>grub</code> 界面</li><li>不要按 <code>↑或↓等光标键</code>，保证选择的项目是 <code>默认的（通常是第一项）</code>。因为不是默认修改后导致无法启动（Trumeet深受其害，连系统都引导不进，最后通过控制台关机再开才进去的，控制台重启都不行，非常危险！）</li><li>随后按下 <code>e</code> 键，进入编辑</li><li>找到 <code>linux /boot/</code> 开头的一行（我的机器是Debian，<code>quite</code>结尾），一直按 <code>→</code> 滚动到这行末尾，添加 <code>init=&quot;/bin/bash&quot;</code>到末尾。（<strong>注意空格！</strong>）</li><li>然后按下 <code>Ctrl+X</code> 或 <code>F10</code> 进入系统。</li><li>这时，惊异地发现，进入Root终端了！！</li><li>然后输入 <code>mount -rw -o remount /</code> 挂载分区，否则后面会无法修改密码。</li><li>最后，输入 <code>passwd</code> 设定 Root 密码吧，一定牢记哦~ （推荐安装 <code>sudo</code>，Debian默认不带）</li></ul><h1 id="无法启动MySQL"><a href="#无法启动MySQL" class="headerlink" title="无法启动MySQL"></a>无法启动MySQL</h1><p>我这方面真心渣，所以一定说SQL问题一下子吓到了，我的SQL、PHP、Nginx都是用lnmp装的，一点不懂..</p><p>根据 <code>https://iwww.me/240.html</code> 的解决方案，我将 <code>/etc/mysql/my.conf</code> 删掉后再重启就解决了，这方面不懂，也就不多阐述了（</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;事情是这样的。我准备把位于英国机房的VPS换到日本去，随后按照网上说法，先 &lt;code&gt;Snapshot&lt;/code&gt;， 新建实例后恢复。&lt;
      
    
    </summary>
    
      <category term="瞎折腾" scheme="https://blog.trumeet.top/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Issues" scheme="https://blog.trumeet.top/tags/Issues/"/>
    
      <category term="瞎折腾" scheme="https://blog.trumeet.top/tags/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>从 Typecho 到 Hexo</title>
    <link href="https://blog.trumeet.top/2017/05/29/from-typecho-to-hexo/"/>
    <id>https://blog.trumeet.top/2017/05/29/from-typecho-to-hexo/</id>
    <published>2017-05-29T16:42:00.000Z</published>
    <updated>2017-09-20T10:44:22.001Z</updated>
    
    <content type="html"><![CDATA[<p>今天我把博客迁移到了Hexo，原博客不会被删除，但也不会更新。新的地址： <a href="https://hexo.trumeet.top" target="_blank" rel="external">https://hexo.trumeet.top</a></p><h1 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h1><p>首先，使用压缩文件的方式备份站点网站目录，再用 PhpMyAdmin 备份数据库，这里不多说</p><h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><p>安装起来比较简单，但我也踩了一些坑：</p><h2 id="Permission-Denied"><a href="#Permission-Denied" class="headerlink" title="Permission Denied"></a>Permission Denied</h2><p>我按照官方文档，在 <code>root</code> 用户安装，到最后一步却提示 <code>Permission Denied</code> ？！ 我无奈建了一个用户，安装成功了。</p><h1 id="安装-Material-主题"><a href="#安装-Material-主题" class="headerlink" title="安装 Material 主题"></a>安装 Material 主题</h1><p>安装我一直用的 <a href="https://material.viosey.com/" target="_blank" rel="external">Material主题</a>，按照官方文档安装，<del>踩坑</del>：</p><h2 id="Unhandled-rejection-TypeError"><a href="#Unhandled-rejection-TypeError" class="headerlink" title="Unhandled rejection TypeError"></a>Unhandled rejection TypeError</h2><p>到最后一步 <code>hexo g</code> 的时候出的错，对这方面一点不懂的我一脸懵逼（</p><p>到最后发现是没有设定语言的锅，在主题 <code>_config.yml</code> 中按照文档设定语言即可</p><h1 id="迁移文章"><a href="#迁移文章" class="headerlink" title="迁移文章"></a>迁移文章</h1><p>这个我也找了一些脚本，都<del>不会用</del>，就自己一点点迁移过去的，反正 Typecho 和 Hexo 都资瓷Markdown嘛</p><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><p>没遇到更多坑了，这些坑已经够受了（XDDD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我把博客迁移到了Hexo，原博客不会被删除，但也不会更新。新的地址： &lt;a href=&quot;https://hexo.trumeet.top&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hexo.trumeet.top&lt;/a&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="瞎折腾" scheme="https://blog.trumeet.top/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>关于 Bmob SDK导致应用出现后台广告的调查</title>
    <link href="https://blog.trumeet.top/2017/05/28/bmob-seo/"/>
    <id>https://blog.trumeet.top/2017/05/28/bmob-seo/</id>
    <published>2017-05-28T19:35:00.000Z</published>
    <updated>2017-09-20T10:44:21.977Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文已过时，仅供参考。此事后续进展请移步 <a href="https://hexo.trumeet.top/2017/06/07/bmob-pay-result/" target="_blank" rel="external">Bmob SDK导致应用出现广告始末</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期，我的App收到酷友反馈，说抓包到了很多不干净的东西。我当时大吃一惊，因为App没有任何相关代码，并开始调查此事。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>首先，排除了我主动操作的原因，只剩下第三方闭源SDK导致。因为App内没有任何相关代码。<br>其次，根据用户反馈，只有 <strong>酷安</strong> 上的版本有这种情况，<strong>Play商店</strong> 上没有，这也就将罪魁祸首指定在了两个SDK上： <strong>Bmob支付</strong> 和 <strong>TinkerPatch</strong> ，因为酷安和Play版仅有这两处不同。<br>第三，排除了 <strong>TinkerPatch</strong> 的可能性，因为这个SDK是开源的。</p><p><strong>所以，只剩下了 Bmob SDK</strong>。</p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>我通过和酷友联系，也自己抓包，抓到了如下结果：</p><ul><li>SDK在初始化后，后台 <strong>随机</strong> 刷指定网址（百度/hao123/广告） 等内容，浪费用户流量和性能</li><li>这些操作是随机的，且关闭屏幕就停止，很难抓到</li><li>经检查，其通常是 <strong>几秒钟刷一次，持续几分钟</strong></li></ul><p>一个抓到的代表性结果：<br><img src="https://ooo.0o0.ooo/2017/05/28/592ab45cb9119.jpg" alt="广告图片"><br><img src="https://ooo.0o0.ooo/2017/05/28/592ab45cd9535.png" alt="抓包工具"></p><p>我也抓到了更多结果，这里不方便继续共享。</p><p>同时，该SDK核心代码均使用 Native 实现，很难进行分析。</p><h1 id="后台播放视频"><a href="#后台播放视频" class="headerlink" title="后台播放视频"></a>后台播放视频</h1><p>这几天，接到了用户反馈，说App追发出一些诡异的广告声音！ 我第一时间想到这很可能是 Bmob SDK 导致，并在酷安发了帖子，许多开发者表示出现同样问题，由此判断这很可能 Bmob SDK 导致的。</p><h1 id="事件影响"><a href="#事件影响" class="headerlink" title="事件影响"></a>事件影响</h1><p>该事件导致用户对我们的软件反馈不好，这也很可能是运营商劫持的后果，希望Bmob彻查此事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文已过时，仅供参考。此事后续进展请移步 &lt;a href=&quot;https://hexo.trumeet.top/2017/06/07/bmob-pay-result/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bmob SDK导
      
    
    </summary>
    
      <category term="大新闻" scheme="https://blog.trumeet.top/categories/%E5%A4%A7%E6%96%B0%E9%97%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>来酷安一年了，总该说点什么</title>
    <link href="https://blog.trumeet.top/2017/05/27/coolapk-one-year/"/>
    <id>https://blog.trumeet.top/2017/05/27/coolapk-one-year/</id>
    <published>2017-05-27T07:18:00.000Z</published>
    <updated>2017-09-20T10:44:22.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="来酷安一年了，总该说点什么"><a href="#来酷安一年了，总该说点什么" class="headerlink" title="来酷安一年了，总该说点什么"></a>来酷安一年了，总该说点什么</h1><p>一年过去了。一年前的今天，我刚刚来到酷安——这个神奇的地方。这篇 Blog 就是讲讲我在酷安的故事和Android入门经历<img src="https://ooo.0o0.ooo/2017/05/28/592a08920dae5.png" alt="#滑稽"></p><h1 id="来到酷安"><a href="#来到酷安" class="headerlink" title="来到酷安"></a>来到酷安</h1><p>2016年3月份左右，我无意间通过 少数派 知道了一个神奇的东西 —— Xposed 。<br> 根据少数派上的教程，开始尝试使用 Xposed 模块—— <code>重力工具箱</code>。今后的一段时间，尝试把玩着各种模块，体验到『原来，Android 还可以这么玩』。那时，我还在用那台很老的华为手机（型号A199 Android4.1.2）。<br> 在少数派，我总能看到 【去酷安下载】 之类的评论。当初刚认识 Google Play，反对一切第三方市场（想到国内的应用市场），酷安也不例外。但是看到少数派那么多人推荐，最后，抱着试一试的态度打开了 coolapk.com 。<br> 在我一番粗略浏览体验之后，和印象中 国内应用市场的网页版感觉完全不一样。首先，界面简洁、美观，也没有XX首发和大横幅广告… 其次，下载 App 都是直接下载，没有所谓的 “高速下载”。 第三，它还有 “去 Play 查看” 这个功能，这是我完全没想到的。我开始对酷安有了点好感，但是当时只顾着折腾 Xposed 很痴迷，也就没有进一步仔细浏览。</p><p>过了段时间，我在 Xposed吧 看到了些 模块合集 的帖子，那些求下载地址的问题楼主经常回复<code>去酷安下</code>，我便再次打开了 Coolapk 。我找到了 “Xposed模块” 分类，并在网页上浏览了当时整个分类的所有模块。对我来说挺震惊的，感觉酷安好Geek，简直6666，和想象中应用市场应有的样子完全不一样</p><p>随后想去下个客户端，但™的被劫持成了 卓易市场<code>辣鸡电信  ，装上感觉和XX助手没什么两样，</code> `”是不是下错了？？？ “ 我当时不知道什么是劫持，然后秒删  。不久后下到了正版。装上后只是浏览 Xposed模块分类和应用集（那几个模块集合）。<br>一次上去找模块的时候，偶然看到了 Google Play 服务的评论区，发现了许多志同道合的G粉，突然感觉这里真的是好多geek（对比其他市场的Google全家桶的哪些评论，简直口怕）。后来注册了一个账号，也冒了个泡：<a href="http://www.coolapk.com/feed/1586404" target="_blank" rel="external">点这里</a> ，<del>走上搞基的不归路。</del></p><h1 id="Sorcery、Via-和-酷友作品"><a href="#Sorcery、Via-和-酷友作品" class="headerlink" title="Sorcery、Via 和 酷友作品"></a>Sorcery、Via 和 <code>酷友作品</code></h1><p>来逛了一段时间，发现了两个极好的App：Sorcery Icon Pack 以及 Via浏览器。以前不知道 <code>图标包</code> 一说，<del>原来手机图标还能换诶（雾）</del>。而且也受够了当时机器里哪些毒瘤浏览器的耗电和占内存（当时用的净化大师调校），发现这么简洁高效的 via浏览器，感觉找到了 <del><code>神器</code></del>。 还很方案那丑出天极的EMUI2.0界面和图标。发觉这两个非常棒的应用，相见恨晚啊！</p><p>更重要的是，知道到了 “酷友作品”，知道这些软件都是酷基们自己开发的，接着体验了 和开发者面对面 的感受，那感觉棒呆了，觉得这个地方有好多dalao，和他们<del>谈笑风生</del>也没什么门槛，大家都很热情的感觉！</p><h1 id="入坑开发"><a href="#入坑开发" class="headerlink" title="入坑开发"></a>入坑开发</h1><p>某一天，我无意中看到了 <a href="http://www.coolapk.com/u/532521" target="_blank" rel="external">龙红瞳</a> 的 <a href="http://www.coolapk.com/faxian/1645820" target="_blank" rel="external">这条发现</a> ，当时挺吸引我的。我觉得是不是自己也能开发一些 App <del>装逼</del> 呢？便开始自己鼓捣。</p><p>我阉割 <code>XInstaller</code> 的部分代码拼了个辣鸡 Xposed模块，于 2016年6月27日左右同样在发现去进行了发布。</p><p>然后，我开始正经地学习开发。当时看了本 Java 书叫做<code>Java入门经典</code> 以及 <code>Java核心技术</code> ，然后看了 Android 书：<code>Android开发权威指南</code>，正式入门，试着开发了一些 App。</p><p>我也同时一边填坑一边学习，并阅读一些dalao博客深入了解一些知识，逛一些技术（<del>女装</del>） 群什么的2333。</p><p>对于刚准备入坑的炮友，我建议先读一些基础书籍，然后自己慢慢做一些小项目。一遍做一遍继续读书，在修Bug的时候进步。然后多逛GitHub上的一些优秀开源项目，多逛逛 <a href="https://gank.io" target="_blank" rel="external">gank.io</a>，多在群里看看dalao们聊点什么技术（<del>发点女装照</del>） ，也会使你受益匪浅的。</p><p>许多朋友问我看的什么书，我在上面写了，这里还推荐 <a href="http://stormzhang.com" target="_blank" rel="external">stormzhang博客</a>，里面有很详细的入门指南，那篇博客激励了无数人，也包括我，真心推荐。</p><p>同时，也可以去看看诸如 GitYuan 等大佬博客，fo一些大佬（如oasisfeng），<del>跟着大佬走</del> <img src="https://ooo.0o0.ooo/2017/05/28/592a08920dae5.png" alt="#滑稽">。</p><h1 id="换了一部手机"><a href="#换了一部手机" class="headerlink" title="换了一部手机"></a>换了一部手机</h1><p>后来根据酷友 <a href="http://coolapk.com/u/523048" target="_blank" rel="external">@DBin_K</a> 推荐，买了一部红米3高配版。道理很简单辣，那个辣鸡华为官方万年不更，第三方也没什么好玩的刷机包，见酷友都用上了 <code>CyanogenMod</code>  Lollipop，我准备换个能刷的，然后就挑了个便宜的买，随后 <del>又走上了刷机的不归路</del><img src="https://ooo.0o0.ooo/2017/05/28/592a08920dae5.png" alt="#滑稽"> 。</p><h1 id="我还想说的一些话"><a href="#我还想说的一些话" class="headerlink" title="我还想说的一些话"></a>我还想说的一些话</h1><p>我在这里呆了一年了，也见到了酷安大大小小的一些事。我身边许多朋友都离开了，我是否也要离开？这个只能拭目以待啦 <img src="https://ooo.0o0.ooo/2017/05/28/592a08920dae5.png" alt="#滑稽">。</p><p>而且，这么Geek的中文社区不多，希望大家珍惜咯。</p><p>留给新来的基友，也忠告现在的老用户一句来自阿酷的话 <img src="https://ooo.0o0.ooo/2017/05/28/592a08920dae5.png" alt="#滑稽">：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">发现应用的乐趣，多搞基，少撕逼。</div></pre></td></tr></table></figure><hr><h3 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h3><p>本文尚未总结这一年中结识的一些酷友们，这将在今后的文章中仔细阐述。</p><p>感谢为本文做出贡献的酷友：</p><p>（排名不分顺序）</p><ul><li><p><a href="http://coolapk.com/u/523048" target="_blank" rel="external">@DBin_K</a></p></li><li><p><a href="http://coolapk.com/u/482620" target="_blank" rel="external">@枫柠檬</a></p><p><del>我这渣文笔也是没谁了 划掉</del></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;来酷安一年了，总该说点什么&quot;&gt;&lt;a href=&quot;#来酷安一年了，总该说点什么&quot; class=&quot;headerlink&quot; title=&quot;来酷安一年了，总该说点什么&quot;&gt;&lt;/a&gt;来酷安一年了，总该说点什么&lt;/h1&gt;&lt;p&gt;一年过去了。一年前的今天，我刚刚来到酷安——这个神奇
      
    
    </summary>
    
      <category term="纪念日" scheme="https://blog.trumeet.top/categories/%E7%BA%AA%E5%BF%B5%E6%97%A5/"/>
    
    
      <category term="酷安" scheme="https://blog.trumeet.top/tags/%E9%85%B7%E5%AE%89/"/>
    
  </entry>
  
  <entry>
    <title>Lineage OS 红米3 中国电信无法使用 2G/3G 的爬坑记录</title>
    <link href="https://blog.trumeet.top/2017/05/20/lineage-telephony-fix/"/>
    <id>https://blog.trumeet.top/2017/05/20/lineage-telephony-fix/</id>
    <published>2017-05-20T06:44:00.000Z</published>
    <updated>2017-09-20T10:44:22.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我的手机刷了类CM-ROM之后就无法使用-2G（打电话-短信）、3G了，只能用-LTE上网。"><a href="#我的手机刷了类CM-ROM之后就无法使用-2G（打电话-短信）、3G了，只能用-LTE上网。" class="headerlink" title="我的手机刷了类CM ROM之后就无法使用 2G（打电话/短信）、3G了，只能用 LTE上网。"></a>我的手机刷了类CM ROM之后就无法使用 2G（打电话/短信）、3G了，只能用 LTE上网。</h2><p>设备是 <strong>红米3 高配 双卡</strong>，卡1插电信。<br>症状：拨打电话/切换2G 显示为无服务</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><blockquote><p>该方案来自贴吧</p></blockquote><ul><li>修改 build.prop：将 <code>ro.telephony.default_network=9,9</code> 改为 <code>ro.telephony.default_network=10,9</code>。如果您没有 <code>ro.telephony.default_network</code> 常量，或其当前值不是 <code>9,9</code>，请停止操作，说明该方案可能不适用于您的设备。 </li><li>备份您的数据（除SD卡以外），包含应用备份和分区备份。</li><li>进入 TWRP，选择 WIPE，然后滑动。这将清除 /data 不清除 /data/media （SD卡），用于恢复出厂设置。</li><li>重启您的设备，随后即可正常使用通话等功能了！</li></ul><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>暂时未知，继续爬坑中</p><h1 id="系统更新后如何操作"><a href="#系统更新后如何操作" class="headerlink" title="系统更新后如何操作"></a>系统更新后如何操作</h1><p>在您更新您的 ROM 之后，您需要尽量在重启前再次按照上面的方法修改 <code>build.prop</code>。因为更新会覆盖 <code>build.prop</code>。不建议您使用 <code>addon.d</code> 脚本备份恢复 <code>build.prop</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;我的手机刷了类CM-ROM之后就无法使用-2G（打电话-短信）、3G了，只能用-LTE上网。&quot;&gt;&lt;a href=&quot;#我的手机刷了类CM-ROM之后就无法使用-2G（打电话-短信）、3G了，只能用-LTE上网。&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="搞手机" scheme="https://blog.trumeet.top/categories/%E6%90%9E%E6%89%8B%E6%9C%BA/"/>
    
    
      <category term="Issues" scheme="https://blog.trumeet.top/tags/Issues/"/>
    
      <category term="搞手机" scheme="https://blog.trumeet.top/tags/%E6%90%9E%E6%89%8B%E6%9C%BA/"/>
    
      <category term="Lineage" scheme="https://blog.trumeet.top/tags/Lineage/"/>
    
      <category term="ROM" scheme="https://blog.trumeet.top/tags/ROM/"/>
    
  </entry>
  
  <entry>
    <title>使用app_process提权</title>
    <link href="https://blog.trumeet.top/2017/05/05/use-app_process/"/>
    <id>https://blog.trumeet.top/2017/05/05/use-app_process/</id>
    <published>2017-05-05T16:05:00.000Z</published>
    <updated>2017-09-20T10:44:22.001Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>要想获取到系统权限，我们可以考虑以下几种方式：</p><ul><li>使用系统插件（把APK放到/system/priv-app或/system/app）<br>这可以拿到部分权限，如安装和卸载软件、冻结软件、强行停止等，实现部分功能。（参见 <strong>冰箱系统插件</strong>、<strong>AppOps系统插件</strong> 等）</li><li>Xposed（可能可行）</li><li>Root + 终端（如，需要定期强行停止一个软件，可以使用 <code>am for-stop</code> 代替 <code>ActivityManager.forceStopPackage(String)</code> ，但是 <strong>速度较慢</strong></li><li>直接用 Root 调用 <code>app_process</code> ，使用打包好的 <code>dex</code> 来调用系统API，可以拿到所有权限，没有签名验证（<code>am</code>等命令就是这样实现的）</li><li>造个ROM（大雾</li></ul><p>插：为什么要用到系统权限呢？<br>一些系统工具，需要使用诸如强行停止、写入系统设置、冻结软件等操作，则需要系统权限。</p></blockquote><h1 id="app-process-是什么"><a href="#app-process-是什么" class="headerlink" title="app_process 是什么"></a>app_process 是什么</h1><blockquote><p>参考：<a href="http://www.cnblogs.com/samchen2009/p/3294713.html" target="_blank" rel="external">http://www.cnblogs.com/samchen2009/p/3294713.html</a></p></blockquote><p><code>app_process</code> 是 <strong><code>启动zygote和其他Java程序的应用程序</code></strong>，zygote是由它启动的，其他Java程序（在Android上是<code>.dex</code>）也如此。</p><h1 id="am"><a href="#am" class="headerlink" title="am"></a>am</h1><p>要理解 <code>app_process</code> 怎么用，我们举个最简单的例子： <strong><a href="https://github.com/android/platform_frameworks_base/blob/master/cmds/am/am" target="_blank" rel="external">am</a></strong></p><p>我们一定经常使用 <code>am</code> 命令，它其实是一个 Shell脚本，代码很简单，就是 <strong><code>通过app_process启动am命令行Java程序并传递参数</code></strong></p><blockquote><p>附上<a href="https://github.com/android/platform_frameworks_base/blob/master/cmds/am/src/com/android/commands/am/Am.java" target="_blank" rel="external">am命令行Java程序</a>代码，很简单的Java程序而已，解析参数，执行操作..</p></blockquote><h1 id="一个结束进程的-Kill-java"><a href="#一个结束进程的-Kill-java" class="headerlink" title="一个结束进程的 Kill.java"></a>一个结束进程的 <code>Kill.java</code></h1><p>我们通过一个示例，展现如何通过 <code>app_process</code> 提权。</p><p>写一个 Kill.java，它会在启动后 <code>强行停止酷安（com.coolapk.market）</code>。<br>一般用于程序是无法调用 <code>forceStopPackage()</code> 的，需要 <code>FORCE_STOP_PACKAGE</code> 权限，它是系统权限。</p><p>模仿 <a href="https://github.com/android/platform_frameworks_base/blob/master/cmds/am/src/com/android/commands/am/Am.java" target="_blank" rel="external">am命令行Java程序</a>，使用简单代码结束进程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.*;</div><div class="line"><span class="keyword">import</span> android.os.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kill</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"Start"</span>);</div><div class="line">IActivityManager am = ActivityManagerNative.getDefault();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">am.forceStopPackage(<span class="string">"com.coolapk.market"</span>, UserHandle.USER_ALL);</div><div class="line">System.out.println(<span class="string">"Success"</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>用<code>notepad++</code>写即可。</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>我们现在需要把它编译成<code>.class</code>。<br>由于使用了 <code>Android API</code>，需要添加 <code>framework.jar</code> 进classpath才能通过编译，我这里用了前一段编译ROM产生的 <code>framework.jar</code>。</p><p>用Javac：<code>javac -source 1.7 -target 1.7 -classpath .\framework.jar .\Kill.java</code>，就完事了。<br><strong>注意：这里需要设置Java版本，否则后面dx会提示不支持：<code>-source 1.7 -target 1.7</code></strong></p><h1 id="把-class转换为-dex"><a href="#把-class转换为-dex" class="headerlink" title="把.class转换为.dex"></a>把<code>.class</code>转换为<code>.dex</code></h1><p>先说一下为什么要转换。</p><blockquote><p>参考：<a href="http://blog.csdn.net/u010651541/article/details/53163542" target="_blank" rel="external">http://blog.csdn.net/u010651541/article/details/53163542</a></p></blockquote><p><code>Android对Java虚拟机做了修改，即使用自己的dalvik虚拟机(后来的ART)。因此，.class的字节码在Dalvik虚拟机上是不能运行的</code></p><p>我们需要使用 <code>dx</code> 工具进行转换，它存在于你的 <code>Android SDK/build-tools/SDK版本/</code> 中。Windows平台是 <code>dx.bat</code>。</p><p>进入编译完的目录，执行命令行进行转换：<br><code>dx.bat --dex --output=&quot;编译保存目录\Kill.dex&quot; Kill.class</code></p><p>完成后，会生成 <code>Kill.dex</code>。</p><h1 id="发到手机"><a href="#发到手机" class="headerlink" title="发到手机"></a>发到手机</h1><p>这个没什么说的，<code>adb push Kill.dex /data/local/tmp</code></p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><ol><li>进终端，adb shell</li><li>模仿 <code>am</code> 那个Shell脚本，首先我们需要声明 CLASSPATH 环境变量，否则后面执行会出现 <code>Aborted</code><br><code>export CLASSPATH=/data/local/tmp/Kill.dex</code></li><li>打开酷安，执行：<code>app_process /data/local/tmp/Kill.dex Kill</code> ，随着 <code>Start</code>，<code>Success</code>，酷安就被强行停止了！</li></ol><p><img src="https://ooo.0o0.ooo/2017/05/05/590c29039284c.png" alt=""></p><p>附：只能使用Shelle或者Root用户强行停止了，其他会被拒绝（废话..<br><img src="https://ooo.0o0.ooo/2017/05/05/590c2903b20cd.jpg" alt=""></p><p><del>这方面菜鸟，dalao勿喷</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;要想获取到系统权限，我们可以考虑以下几种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用系统插件（把APK放到/system/priv-app或/system/app）&lt;br&gt;这可以拿到部分权限，如安装和卸载软件、冻结软件、强行停止等，实现部分功能。（参见 
      
    
    </summary>
    
    
      <category term="Android开发" scheme="https://blog.trumeet.top/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>【通知】博客迁移时间轴</title>
    <link href="https://blog.trumeet.top/2017/05/05/new-blog/"/>
    <id>https://blog.trumeet.top/2017/05/05/new-blog/</id>
    <published>2017-05-05T15:53:00.000Z</published>
    <updated>2017-09-20T10:44:22.001Z</updated>
    
    <content type="html"><![CDATA[<p>自从 Trumeet 有了自己的服务器和域名之后，就开始搭建主页和迁移博客，旧的博客 <a href="https://lyt.letitfly.me" target="_blank" rel="external">https://lyt.letitfly.me</a> 将于一段时间后弃用，并迁移到新的站点 <a href="https://hexo.trumeet.top" target="_blank" rel="external">https://hexo.trumeet.top</a> ，感谢站长 guozixi 的大力支持。</p><h1 id="迁移原因"><a href="#迁移原因" class="headerlink" title="迁移原因"></a>迁移原因</h1><ul><li>想拥有自己的独立域名</li><li>同时，减轻LetITFly 服务器压力</li><li>想停止交易，觉得PY太多，身体虚（大雾</li><li>其他等诸多原因</li></ul><h1 id="具体安排"><a href="#具体安排" class="headerlink" title="具体安排"></a>具体安排</h1><ul><li><p>2017-05-01<br>[OK] 备份并冻结原博客数据 <a href="https://lyt.letitfly.me" target="_blank" rel="external">https://lyt.letitfly.me</a></p></li><li><p>2017-05-05<br>[OK] 恢复数据，搭建好新的博客站 <a href="https://hexo.trumeet.top" target="_blank" rel="external">https://hexo.trumeet.top</a><br>[OK] 与 <a href="https://t.me/Trumeet_Blog" target="_blank" rel="external">Trumeet博客订阅</a> 绑定<br>[OK] 发布此通知</p></li><li><p>2017-06-10<br>[..] 清除原博客数据，并保留对新站的<code>跳转</code>。<br>[OK] 解除原博客的 <a href="https://t.me/Trumeet_Blog" target="_blank" rel="external">Trumeet博客订阅</a> 绑定</p></li><li><p>2017-12-31<br>[..] 停止对新站的跳转</p></li></ul><h2 id=""><a href="#" class="headerlink" title="# "></a># </h2><p>欢迎记住我的新个人主页：<a href="https://trumeet.top" target="_blank" rel="external">https://trumeet.top</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自从 Trumeet 有了自己的服务器和域名之后，就开始搭建主页和迁移博客，旧的博客 &lt;a href=&quot;https://lyt.letitfly.me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://lyt.letitfly.me&lt;/a&gt; 将
      
    
    </summary>
    
      <category term="瞎折腾" scheme="https://blog.trumeet.top/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>绿色守护处方</title>
    <link href="https://blog.trumeet.top/2017/02/02/greenify-prescription/"/>
    <id>https://blog.trumeet.top/2017/02/02/greenify-prescription/</id>
    <published>2017-02-02T13:50:00.000Z</published>
    <updated>2017-09-20T10:44:22.001Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间，绿色守护推出了一个功能名叫 <code>处方</code>，简而言之，就是依靠用户自建的规则来阻止广播。<br>昨天，我听到消息说可以自己写处方，就兴冲冲地去做了。<br>我前往了<strong><a href="greenify.github.io">绿色守护官方页面</a></strong>看了说明后，大概理解了一下，也就是这个样子:</p><ul><li>处方必须以<strong><code>rx-</code></strong> 开头（rxs我还没了解）</li><li>发布处方必须以<code>https://greenify.github.io/&lt;用户名&gt;/&lt;代码库名&gt;</code>作为URL，在手机上打开后可以被跳转到绿色守护进行导入。</li><li>处方内容以XML方式提供</li><li>所谓“社区”并不是大家所熟知的论坛，而是用户通过<code>GitHub版本库</code>自己创建的处方，自己进行发布。处方传播则依赖论坛（比如说被钦点的<code>酷安</code>[滑稽]）<h2 id="开始创建处方"><a href="#开始创建处方" class="headerlink" title="开始创建处方"></a>开始创建处方</h2>话不多说，先创建版本库。我创建一个<code>QQ</code>的广播控制，所以我起名叫 <code>rx-qq</code>。<br>然后在项目内创建一个名为 <code>rx-qq.xml</code>，用于处方内容。<br>在<code>rx-qq.xml</code>填入以下内容：<strong>这只是示例，请不要用于真实项目</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">prescription</span> <span class="attr">xmlns</span>=<span class="string">"http://greenify.github.io/schemas/prescription/v1"</span> <span class="attr">type</span>=<span class="string">"service"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"com.weiyun.plugin.BROADCAST"</span> /&gt;</span></div><div class="line">    (这里可以往下写更多的)</div><div class="line">  <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">prescription</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p>上方<code>&lt;action name=&quot;com.weiyun.plugin.BROADCAST&quot; /&gt;</code>代表名为 <code>com.weiyun.plugin.BROADCAST</code>的广播会被绿色守护拦截。可以在下方写下更多的<code>action</code>标签。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">prescription</span> <span class="attr">xmlns</span>=<span class="string">"http://greenify.github.io/schemas/prescription/v1"</span> <span class="attr">type</span>=<span class="string">"service"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"com.weiyun.plugin.BROADCAST"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"com.tencent.mobileqq.ACTION_PLUGIN_CRASH"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"com.tencent.mobileqq.ACTION_PLUGIN_STARTUP_FAILED"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"com.tencent.mobileqq.ACTION_PLUGIN_DIR_INFO_LOG"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"com.tencent.mobileqq.rdm.report"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">prescription</span>&gt;</span></div></pre></td></tr></table></figure></p><p>提交保存。接下来使用链接导入至绿色守护：<code>https://greenify.github.io/liangyuteng0927/rx-qq</code> <strong>请将这里的用户名和项目名称替换成你自己的</strong><br>用手机打开链接，将会被跳转到绿色守护进行导入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这段时间，绿色守护推出了一个功能名叫 &lt;code&gt;处方&lt;/code&gt;，简而言之，就是依靠用户自建的规则来阻止广播。&lt;br&gt;昨天，我听到消息说可以自己写处方，就兴冲冲地去做了。&lt;br&gt;我前往了&lt;strong&gt;&lt;a href=&quot;greenify.github.io&quot;&gt;绿色守护官
      
    
    </summary>
    
    
      <category term="Android开发" scheme="https://blog.trumeet.top/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
